
The first two were spotted via inspection by Fedora team,
the third one was added to address an error found using valgrind:
   $ : > j && valgrind ./reged -e j
       ~/w/co/chntpw: 
  ==16084==    by 0x4011E3: main (reged.c:103)
     get_abs_path: Not a 'nk' node!

* ntreg.c (fmyinput): Don't clobber ibuf[-1] upon NUL input.
* ntreg.c (convert_string): Don't segfault upon low memory.
* ntreg.c (openHive): Don't read uninitialized when file is too small.
--- a/ntreg.c
+++ b/ntreg.c
@@ -82,14 +82,16 @@
 
 int fmyinput(char *prmpt, char *ibuf, int maxlen)
 {
-   
+   int len;
    printf("%s",prmpt);
    
    fgets(ibuf,maxlen+1,stdin);
+   len = strlen(ibuf);
    
-   ibuf[strlen(ibuf)-1] = 0;
+   if (len)
+      ibuf[len-1] = 0;
    
-   return(strlen(ibuf));
+   return len;
 }
 
 /* Print len number of hexbytes */
@@ -2583,7 +2585,10 @@
     int i, k;
     int reallen = len / 2;
     char *cstring = (char *)malloc(reallen);
-
+    if (cstring == NULL) {
+	printf("FATAL! convert_string: malloc() failed! Out of memory?\n");
+	abort();
+      }
     for(i = 0, k = 0; i < len; i += 2, k++)
     {
         cstring[k] = ((char *)string)[i];
@@ -2848,6 +2853,14 @@
     closeHive(hdesc);
     return(NULL);
   }
+
+  if (r < sizeof (*hdesc)) {
+    fprintf(stderr,
+	    "file is too small; got %d bytes while expecting %d or more\n",
+	    r, sizeof (*hdesc));
+    closeHive(hdesc);
+    return(NULL);
+  }
 
   /* Now run through file, tallying all pages */
   /* NOTE/KLUDGE: Assume first page starts at offset 0x1000 */
